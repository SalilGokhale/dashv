# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the action will run. 
on:
  # Triggers the workflow on push or pull request events but only for the master branch
  push:
    branches: [ master ]
#   pull_request:
#     branches: [ master ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
    
    strategy:
      matrix:
        node-version: [10.x]

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
      # Include node js       
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}
          
      - name: NPM Install and Build
        run: |
          cd dashv-frontend
          npm install
          npm run build
      # - name: Deploy to S3
      #   uses: jakejarvis/s3-sync-action@master
      #   with:
      #     args: --acl public-read
      #   env:
      #     AWS_S3_BUCKET: ${{ secrets.AWS_PRODUCTION_BUCKET_NAME }}
      #     AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      #     AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      #     AWS_REGION: ${{ secrets.AWS_REGION_S3 }}
      #     SOURCE_DIR: "dashv-frontend/build"
      - name: Deploy
        uses: reggionick/s3-deploy@v3
        with:
          folder: dashv-frontend/build
          bucket: ${{ secrets.AWS_PRODUCTION_BUCKET_NAME }}
          bucket-region: ${{ secrets.AWS_REGION_S3 }}
          delete-removed: true
          # private: true

      ### Deploy Python Lambda to AWS ###

      - name: Set up Python 3.6
        uses: actions/setup-python@v1
        with:
          python-version: 3.6

      - name: Install pipenv and libpq
        run: |
          cd dashv-lambda
          pip install pipenv

      - name: Cache pipenv virtualenv
        id: cache-pipenv
        uses: actions/cache@v1
        with:
          path: ~/.local/share/virtualenvs
          key: ${{ runner.os }}-pipenv-${{ hashFiles('**/Pipfile.lock') }}

      - name: Install dependencies
        if: steps.cache-pipenv.outputs.cache-hit != 'true'
        run: |
          cd dashv-lambda
          pipenv install

      - name: Zip up lambda executable
        run: zip -r dashv-lambda.zip dashv-lambda

      - name: Deploy lambda
        uses: appleboy/lambda-action@master
        with:
          aws_access_key_id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws_secret_access_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws_region: ${{ secrets.AWS_REGION_LAMBDA }}
          function_name: dashv-lambda
          zip_file: dashv-lambda.zip
          memory_size: 128
          timeout: 10
          handler: service.get
          role: ${{ secrets.AWS_LAMBDA_ROLE }}
          runtime: python3.6

      
